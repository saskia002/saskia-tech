

// Auth models

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Post      Post[]
  Comment   Comment[]

  @@schema("blog")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@schema("blog")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("blog")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@schema("blog")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@schema("blog")
}


// Blog models

model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  title String
  img   String?
  Posts Post[]

  created   DateTime @default(now())
  edited    DateTime @default(now())
  deleted   Boolean  @default(false)

  @@schema("blog")
}

model Post {
  id              String    @id @default(cuid()) @map("_id")
  slug            String    @unique
  title           String
  desc            String
  img             String?
  views           Int       @default(0)
  categorySlug    String
  category        Category  @relation(fields: [categorySlug], references: [slug])
  userEmail       String
  user            User      @relation(fields: [userEmail], references: [email])
  comments        Comment[]

  created   DateTime @default(now())
  edited    DateTime @default(now())
  deleted   Boolean  @default(false)

  @@schema("blog")
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
  created   DateTime @default(now())
  edited    DateTime @default(now())
  deleted   Boolean  @default(false)

  @@schema("blog")
}
