// Auth models

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role String? // New column

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Post      Post[]
  Comment   Comment[]

  @@schema("blog")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@schema("blog")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("blog")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@schema("blog")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@schema("blog")
}

// Blog models

model Category {
  code  String  @id @unique
  name  String  @unique
  img   String?
  Posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  @@schema("blog")
}

model Post {
  id           Int       @id @default(autoincrement())
  slug         String    @unique
  title        String
  description  String
  content      String
  img          String?
  views        Int       @default(0)
  categoryCode String
  category     Category  @relation(fields: [categoryCode], references: [code])
  userEmail    String
  user         User      @relation(fields: [userEmail], references: [email])
  comments     Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  public Boolean @default(false)

  @@schema("blog")
}

model Comment {
  id          Int      @id @default(autoincrement())
  description String
  userEmail   String
  user        User     @relation(fields: [userEmail], references: [email])
  postSlug    String
  post        Post     @relation(fields: [postSlug], references: [slug])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deleted     Boolean  @default(false)

  @@schema("blog")
}
